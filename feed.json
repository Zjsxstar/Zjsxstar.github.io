{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gavin Yu的博客",
    "description": "欢迎来到Gavin的笔记空间~",
    "home_page_url": "https://zjsxstar.github.io",
    "items": [
        {
            "id": "https://zjsxstar.github.io/2023/10/26/%E5%88%A9%E7%94%A8github+picgo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A&%E7%BB%93%E5%90%88typora%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0%E5%85%B6%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/",
            "url": "https://zjsxstar.github.io/2023/10/26/%E5%88%A9%E7%94%A8github+picgo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A&%E7%BB%93%E5%90%88typora%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0%E5%85%B6%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/",
            "title": "利用github+picgo搭建免费图床&结合typora快速实现其图片上传",
            "date_published": "2023-10-26T12:14:50.783Z",
            "content_html": "<p><strong>首先解释下为什么要这么做？</strong></p>\n<p>其实只需要github你就可以搭建免费的图床，你只需要进行下面几个步骤即可：</p>\n<ol>\n<li>在github上创建一个远程仓库，名字随便取（这边取<code>image</code>），其他都可以默认。</li>\n<li>在本地找到需要上传的图片文件夹（例如是<code>Image</code>文件夹），进入文件夹，在该目录下打开<code>git bash</code>，然后运行<code>git init</code>命令初始化本地仓库，然后就是运行<code>git add . </code> <code>git commit -m &#39;&#39;</code>,然后把本地仓库上传至github的远程image仓库即可</li>\n</ol>\n<h1 id=\"github-picgo搭建免费图床步骤\"><a href=\"#github-picgo搭建免费图床步骤\" class=\"headerlink\" title=\"github+picgo搭建免费图床步骤\"></a>github+picgo搭建免费图床步骤</h1><h2 id=\"1-安装picgo软件\"><a href=\"#1-安装picgo软件\" class=\"headerlink\" title=\"1. 安装picgo软件\"></a>1. 安装picgo软件</h2><ol>\n<li>在github上搜索picgo，如下图所示</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026203328188.png\" alt=\"image-20231026203328188\"></p>\n<p>然后点击release版本</p>\n<p>下载对应windows的版本</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026203643428.png\" alt=\"image-20231026203643428\"></p>\n<p>默认安装完成。</p>\n<h2 id=\"2-在github上建立远程仓库\"><a href=\"#2-在github上建立远程仓库\" class=\"headerlink\" title=\"2.在github上建立远程仓库\"></a>2.在github上建立远程仓库</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026204012567.png\" alt=\"image-20231026204012567\"></p>\n<p>上图因为我已经建立了image仓库，所以标红报错了。</p>\n<h2 id=\"3-picgo的配置\"><a href=\"#3-picgo的配置\" class=\"headerlink\" title=\"3. picgo的配置\"></a>3. picgo的配置</h2><p>首先是点击图床设置，点击GitHub这一栏，然后点击+创建，如果已经有了就点编辑</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026204535927.png\" alt=\"image-20231026204535927\"></p>\n<p>然后进行如下的设置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026204618228.png\" alt=\"image-20231026204618228\"></p>\n<ul>\n<li><p>图床配置名可以随便配置</p>\n</li>\n<li><p>仓库名：就是你github用户名&#x2F;远程仓库名</p>\n</li>\n<li><p>设定分支名：master，这个看你自己</p>\n</li>\n<li><p>设定存储路径：就是在image下的路径，我上面的设置就相当于之后的图片是存储在</p>\n<p>github用户名&#x2F;远程仓库名&#x2F;PicGo_image&#x2F;目录下</p>\n</li>\n<li><p>设定自定义域名<br><a href=\"https://cdn.jsdelivr.net/gh/\">https://cdn.jsdelivr.net/gh/</a> （用于资源的一个加速）  这个不变，后面就是设定的仓库名</p>\n</li>\n<li><p>设定Token<br>点击右上角的github的设置，找到Developer settings,然后点击Tokens(classic)</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026205501572.png\" alt=\"image-20231026205501572\"></p>\n<p>然后 点击 generate new token(classic)，然后进行如下设置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026205803543.png\" alt=\"image-20231026205803543\"></p>\n<p>Note内容自己随便取</p>\n<p>点击创建，然后复制token，粘贴到 设定token这一栏内即可。</p>\n<p>所有设置完成后<strong>，记得将它设置为默认图床。</strong></p>\n<p>到这一步大概配置都完成了，但是还有一个需要验证的地方哦~如下图所示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026211017435.png\" alt=\"image-20231026211017435\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026211109365.png\" alt=\"image-20231026211109365\"></p>\n<h1 id=\"结合typora快速实现其图片上传\"><a href=\"#结合typora快速实现其图片上传\" class=\"headerlink\" title=\"结合typora快速实现其图片上传\"></a>结合typora快速实现其图片上传</h1><h2 id=\"下载typora0-9-84及以上版本\"><a href=\"#下载typora0-9-84及以上版本\" class=\"headerlink\" title=\"下载typora0.9.84及以上版本\"></a>下载typora0.9.84及以上版本</h2><p>自己网上找哈~</p>\n<p>下载完成后，点击图片的偏好设置，进行如下图所示的设置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026210629147.png\" alt=\"image-20231026210629147\"></p>\n<p>可以点击验证图片上传选项，看是否可行</p>\n<h2 id=\"如何上传图片\"><a href=\"#如何上传图片\" class=\"headerlink\" title=\"如何上传图片\"></a>如何上传图片</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026211322400.png\" alt=\"image-20231026211322400\">上面是你正常把图片粘贴到目录下的情况，很明显是本地图片，一旦换个电脑或者上传到服务器上，图片就是不可见的了，只要把图片选中，右键上传图片，就能把图片上传至github上，这样图片在其他服务器上也是可见的，如下图所示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/image-20231026211225958.png\" alt=\"image-20231026211225958\"></p>\n",
            "tags": []
        },
        {
            "id": "https://zjsxstar.github.io/2023/10/26/hello-world/",
            "url": "https://zjsxstar.github.io/2023/10/26/hello-world/",
            "title": "Hello World",
            "date_published": "2023-10-26T10:07:26.250Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "https://zjsxstar.github.io/2023/10/26/hexo%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA&%E4%B8%BB%E9%A2%98shokax%E4%BD%BF%E7%94%A8/",
            "url": "https://zjsxstar.github.io/2023/10/26/hexo%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA&%E4%B8%BB%E9%A2%98shokax%E4%BD%BF%E7%94%A8/",
            "title": "hexo 网页搭建 & 主题shokax的使用",
            "date_published": "2023-10-26T03:11:33.426Z",
            "content_html": "<h2 id=\"hexo-网页搭建\"><a href=\"#hexo-网页搭建\" class=\"headerlink\" title=\"hexo 网页搭建\"></a>hexo 网页搭建</h2><h3 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href=\"https://hexo.io/zh-cn/\">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>\n<h3 id=\"Hexo搭建步骤\"><a href=\"#Hexo搭建步骤\" class=\"headerlink\" title=\"Hexo搭建步骤\"></a>Hexo搭建步骤</h3><ol>\n<li>安装Git</li>\n<li>安装Node.js</li>\n<li>安装Hexo</li>\n<li>GitHub创建个人仓库</li>\n<li>生成SSH添加到GitHub</li>\n<li>将hexo部署到GitHub</li>\n<li>发布文章</li>\n</ol>\n<h4 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h4><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程</a></p>\n<p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>\n<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>安装好后，用<code>git --version</code> 来查看一下版本</p>\n<h4 id=\"2-安装nodejs\"><a href=\"#2-安装nodejs\" class=\"headerlink\" title=\"2. 安装nodejs\"></a>2. 安装nodejs</h4><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>\n<p>windows：<a href=\"https://nodejs.org/en/download/\">nodejs</a>选择LTS版本就行了。</p>\n<p>安装完后，打开命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>检查一下有没有安装成功</p>\n<p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p>\n<h4 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3. 安装hexo\"></a>3. 安装hexo</h4><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>\n<p>输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>依旧用<code>hexo -v</code>查看一下版本</p>\n<p>至此就全部安装完了。</p>\n<p>接下来初始化一下hexo，在blog路径下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n\n<p>这个myblog可以自己取什么名字都行，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> myblog //进入这个myblog文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>新建完成后，指定文件夹目录下有：</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章</li>\n<li>themes：主题</li>\n<li><strong>_config.yml: 博客的配置文件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p>\n<p>大概长这样：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/1698315145946.png\" alt=\"1698315145946\"></p>\n<h4 id=\"4-GitHub创建个人仓库\"><a href=\"#4-GitHub创建个人仓库\" class=\"headerlink\" title=\"4. GitHub创建个人仓库\"></a>4. GitHub创建个人仓库</h4><p>首先，你先要有一个GitHub账户，注册我就不细讲了。</p>\n<p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p>\n<p>创建一个和你github用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p>\n<p>其他的默认即可，点击create repository。</p>\n<h4 id=\"5-生成SSH添加到GitHub\"><a href=\"#5-生成SSH添加到GitHub\" class=\"headerlink\" title=\"5. 生成SSH添加到GitHub\"></a>5. 生成SSH添加到GitHub</h4><p>回到你的git bash中，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>然后创建SSH,一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/1698303339645.png\" alt=\"1698303339645\"></p>\n<p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>\n<p>在gitbash中，查看是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-将hexo部署到GitHub\"><a href=\"#6-将hexo部署到GitHub\" class=\"headerlink\" title=\"6. 将hexo部署到GitHub\"></a>6. 将hexo部署到GitHub</h4><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为YourgithubName，就是你的GitHub账户名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<p>在myblog目录下运行下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意deploy时可能要你输入username和password。</p>\n<p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a4eba29bb7c185169228b596e636422f.png\" alt=\"img\"></p>\n<h4 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h4><p>在source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>就可以看到更新了。</p>\n<h2 id=\"主题shokax的使用\"><a href=\"#主题shokax的使用\" class=\"headerlink\" title=\"主题shokax的使用\"></a>主题shokax的使用</h2><p>首先是进入hexo的主题网站，<a href=\"https://hexo.io/themes/\">Themes | Hexo</a></p>\n<p>搜索shokax，得到如下图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Zjsxstar/image/PicGo_image/1698304925901.png\" alt=\"1698304925901\"></p>\n<p>点击shokax，跳转到对应的github地址，找到安装方法：</p>\n<p>在myblog目录下，运行下面命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i shokax-cli --location=<span class=\"keyword\">global</span></span><br><span class=\"line\"><span class=\"comment\"># hexo init 初始化环境</span></span><br><span class=\"line\">SXC install shokaX</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.kaitaku.xyz/guide/#%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98\">点此</a>以进行下一步配置</p>\n<p>我这边直接贴出下一步配置具体步骤：</p>\n<p>更改根目录<code>_config.yml</code>中的<code>theme</code>为<code>shokaX</code>(SXC 默认 origin 或 npm 安装修改为<code>shokax</code>)<br>请注意,本主题仅在 npm 上使用的是<code>shokax</code>,其他情况下均为<code>shokaX</code><br>对于 linux 等大小写敏感的系统，npm 源的 theme 必须使用<code>shokax</code>同时修改自定义配置文件为<code>_config.shokax.yml</code></p>\n<p>至此，主题配置完成，可以使用了。</p>\n<p><strong>注意</strong>：shokaX主题不是安装在themes目录下的，是安装在<code>node_modules\\hexo-theme-shokax</code>下的</p>\n<h3 id=\"针对本地运行能显示图片，但是部署到github上后就不能显示的问题的解决方法\"><a href=\"#针对本地运行能显示图片，但是部署到github上后就不能显示的问题的解决方法\" class=\"headerlink\" title=\"针对本地运行能显示图片，但是部署到github上后就不能显示的问题的解决方法\"></a>针对本地运行能显示图片，但是部署到github上后就不能显示的问题的解决方法</h3><p>目前新浪图床开启了防盗链,所以所有cover图片都无法正常加载,解决方法如下<strong>（二选一）</strong>:</p>\n<ul>\n<li>自托管封面图片</li>\n<li>使用CSS渐变模式</li>\n</ul>\n<h4 id=\"自托管\"><a href=\"#自托管\" class=\"headerlink\" title=\"自托管\"></a>自托管</h4><p><a href=\"https://gitee.com/zkz0/image/tree/master\">点我</a>跳转到作者做的封面图片备份,将备份clone到本地或服务器上,剩下的和静态网站托管一样<br>修改<code>_images.yml</code>内的内容,参考此格式:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">http://example.com/img1.webp</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">http://example.com/img2.webp</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用CSS渐变模式\"><a href=\"#使用CSS渐变模式\" class=\"headerlink\" title=\"使用CSS渐变模式\"></a>使用CSS渐变模式</h4><p>此模式将文章封面修改为CSS渐变来解决此问题<br>修改主题<code>_config.yml</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experiments:</span><br><span class=\"line\">  gradient: true # 使用CSS渐变作为文章封面</span><br><span class=\"line\">  fixedCover: &quot;/cover.webp&quot; # 当gradient为true时使用的主页面cover或者主界面的固定Cover(0.1.5+)</span><br><span class=\"line\">  # 上面的配置请设置为自己的背景图片</span><br></pre></td></tr></table></figure>\n\n\n\n<p>随后重新<code>hexo g</code>即可</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/BetrayVirginia/article/details/113572364\">第2章-Hexo博客美化 | shkoa的配置范例_shokax主题-CSDN博客</a></p>\n",
            "tags": []
        }
    ]
}